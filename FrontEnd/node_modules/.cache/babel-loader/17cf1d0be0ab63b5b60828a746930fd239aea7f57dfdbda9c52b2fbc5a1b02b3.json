{"ast":null,"code":"/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return () => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          result = result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            throw new Error(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn == null ? void 0 : feature.createColumn(column, table));\n  }, column);\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column;\n}\n\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader == null ? void 0 : feature.createHeader(header, table));\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        var _left$map$filter, _right$map$filter;\n        const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n        const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n        const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n        return headerGroups;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;\n        }\n      }),\n      getCenterHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;\n        }\n      }),\n      getLeftHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n        var _left$map$filter2;\n        const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;\n        }\n      }),\n      getRightHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n        var _right$map$filter2;\n        const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;\n        }\n      }),\n      // Footer Groups\n\n      getFooterGroups: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFooterGroups: memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFooterGroups: memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => {\n          var _table$options$debugA7;\n          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;\n        }\n      }),\n      getRightFooterGroups: memo(() => [table.getRightHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => {\n          var _table$options$debugA8;\n          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;\n        }\n      }),\n      // Flat Headers\n\n      getFlatHeaders: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return headerGroups.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => {\n          var _table$options$debugA9;\n          return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFlatHeaders: memo(() => [table.getLeftHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => {\n          var _table$options$debugA10;\n          return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFlatHeaders: memo(() => [table.getCenterHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => {\n          var _table$options$debugA11;\n          return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;\n        }\n      }),\n      getRightFlatHeaders: memo(() => [table.getRightHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => {\n          var _table$options$debugA12;\n          return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;\n        }\n      }),\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders;\n          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => {\n          var _table$options$debugA13;\n          return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;\n        }\n      }),\n      getLeftLeafHeaders: memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders2;\n          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => {\n          var _table$options$debugA14;\n          return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;\n        }\n      }),\n      getRightLeafHeaders: memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders3;\n          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => {\n          var _table$options$debugA15;\n          return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;\n        }\n      }),\n      getLeafHeaders: memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n        var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n        return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n          return header.getLeafHeaders();\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => {\n          var _table$options$debugA16;\n          return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;\n        }\n      })\n    };\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getSize: () => {\n        var _column$columnDef$min, _ref, _column$columnDef$max;\n        const columnSize = table.getState().columnSizing[column.id];\n        return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n      },\n      getStart: position => {\n        const columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n        const index = columns.findIndex(d => d.id === column.id);\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1];\n          return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n        }\n        return 0;\n      },\n      resetSize: () => {\n        table.setColumnSizing(_ref2 => {\n          let {\n            [column.id]: _,\n            ...rest\n          } = _ref2;\n          return rest;\n        });\n      },\n      getCanResize: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id;\n      }\n    };\n  },\n  createHeader: (header, table) => {\n    return {\n      getSize: () => {\n        let sum = 0;\n        const recurse = header => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse);\n          } else {\n            var _header$column$getSiz;\n            sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n          }\n        };\n        recurse(header);\n        return sum;\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n        }\n        return 0;\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id);\n        const canResize = column.getCanResize();\n        return e => {\n          if (!canResize) {\n            return;\n          }\n          e.persist == null ? void 0 : e.persist();\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return;\n            }\n          }\n          const startSize = header.getSize();\n          const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n          const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n          const updateOffset = (eventType, clientXPos) => {\n            if (typeof clientXPos !== 'number') {\n              return;\n            }\n            let newColumnSizing = {};\n            table.setColumnSizingInfo(old => {\n              var _old$startOffset, _old$startSize;\n              const deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);\n              const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n              old.columnSizingStart.forEach(_ref3 => {\n                let [columnId, headerSize] = _ref3;\n                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n              });\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage\n              };\n            });\n            if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing\n              }));\n            }\n          };\n          const onMove = clientXPos => updateOffset('move', clientXPos);\n          const onEnd = clientXPos => {\n            updateOffset('end', clientXPos);\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: []\n            }));\n          };\n          const mouseEvents = {\n            moveHandler: e => onMove(e.clientX),\n            upHandler: e => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler);\n              document.removeEventListener('mouseup', mouseEvents.upHandler);\n              onEnd(e.clientX);\n            }\n          };\n          const touchEvents = {\n            moveHandler: e => {\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onMove(e.touches[0].clientX);\n              return false;\n            },\n            upHandler: e => {\n              var _e$touches$;\n              document.removeEventListener('touchmove', touchEvents.moveHandler);\n              document.removeEventListener('touchend', touchEvents.upHandler);\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n            }\n          };\n          const passiveIfSupported = passiveEventSupported() ? {\n            passive: false\n          } : false;\n          if (isTouchStartEvent(e)) {\n            document.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n          } else {\n            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n          }\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id\n          }));\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater),\n      setColumnSizingInfo: updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater),\n      resetColumnSizing: defaultState => {\n        var _table$initialState$c;\n        table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n      },\n      resetHeaderSizeInfo: defaultState => {\n        var _table$initialState$c2;\n        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n      },\n      getTotalSize: () => {\n        var _table$getHeaderGroup, _table$getHeaderGroup2;\n        return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getHeaderGroup : 0;\n      },\n      getLeftTotalSize: () => {\n        var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n        return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getLeftHeaderG : 0;\n      },\n      getCenterTotalSize: () => {\n        var _table$getCenterHeade, _table$getCenterHeade2;\n        return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getCenterHeade : 0;\n      },\n      getRightTotalSize: () => {\n        var _table$getRightHeader, _table$getRightHeader2;\n        return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getRightHeader : 0;\n      }\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetExpanded: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: defaultState => {\n        var _table$initialState$e, _table$initialState;\n        table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand());\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return e => {\n          e.persist == null ? void 0 : e.persist();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n        if (!Object.keys(expanded).length) {\n          return false;\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false;\n        }\n\n        // They must all be expanded :shrug:\n        return true;\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0;\n        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(id => {\n          const splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          var _expanded;\n          const exists = old === true ? true : !!(old != null && old[row.id]);\n          let oldExpanded = {};\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n          expanded = (_expanded = expanded) != null ? _expanded : !exists;\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true\n            };\n          }\n          if (exists && !expanded) {\n            const {\n              [row.id]: _,\n              ...rest\n            } = oldExpanded;\n            return rest;\n          }\n          return old;\n        });\n      },\n      getIsExpanded: () => {\n        var _table$options$getIsR;\n        const expanded = table.getState().expanded;\n        return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n      },\n      getCanExpand: () => {\n        var _table$options$getRow, _table$options$enable, _row$subRows;\n        return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand();\n        return () => {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue;\n  const search = filterValue.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null ? void 0 : _row$getValue.toLowerCase().includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null ? void 0 : _row$getValue2.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n  return ((_row$getValue3 = row.getValue(columnId)) == null ? void 0 : _row$getValue3.toLowerCase()) === filterValue.toLowerCase();\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst Filters = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode, _table$getCoreRowMode2;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null ? void 0 : (_table$getCoreRowMode2 = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode2.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'string') {\n          return filterFns.includesString;\n        }\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange;\n        }\n        if (typeof value === 'boolean') {\n          return filterFns.equals;\n        }\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals;\n        }\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes;\n        }\n        return filterFns.weakEquals;\n      },\n      getFilterFn: () => {\n        var _table$options$filter, _table$options$filter2;\n        return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn()\n        // @ts-ignore\n        : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n      },\n      getCanFilter: () => {\n        var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n        return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n      },\n      getCanGlobalFilter: () => {\n        var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;\n        return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n      },\n      getIsFiltered: () => column.getFilterIndex() > -1,\n      getFilterValue: () => {\n        var _table$getState$colum, _table$getState$colum2;\n        return (_table$getState$colum = table.getState().columnFilters) == null ? void 0 : (_table$getState$colum2 = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum2.value;\n      },\n      getFilterIndex: () => {\n        var _table$getState$colum3, _table$getState$colum4;\n        return (_table$getState$colum3 = (_table$getState$colum4 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum4.findIndex(d => d.id === column.id)) != null ? _table$getState$colum3 : -1;\n      },\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn();\n          const previousfilter = old == null ? void 0 : old.find(d => d.id === column.id);\n          const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined);\n\n          //\n          if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n            var _old$filter;\n            return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n          }\n          const newFilterObj = {\n            id: column.id,\n            value: newFilter\n          };\n          if (previousfilter) {\n            var _old$map;\n            return (_old$map = old == null ? void 0 : old.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj;\n              }\n              return d;\n            })) != null ? _old$map : [];\n          }\n          if (old != null && old.length) {\n            return [...old, newFilterObj];\n          }\n          return [newFilterObj];\n        });\n      },\n      _getFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return column._getFacetedRowModel();\n      },\n      _getFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map();\n        }\n        return column._getFacetedUniqueValues();\n      },\n      _getFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined;\n        }\n        return column._getFacetedMinMaxValues();\n      }\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    };\n  },\n\n  createRow: (row, table) => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {}\n    };\n  },\n  createTable: table => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString;\n      },\n      getGlobalFilterFn: () => {\n        var _table$options$filter3, _table$options$filter4;\n        const {\n          globalFilterFn: globalFilterFn\n        } = table.options;\n        return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn()\n        // @ts-ignore\n        : (_table$options$filter3 = (_table$options$filter4 = table.options.filterFns) == null ? void 0 : _table$options$filter4[globalFilterFn]) != null ? _table$options$filter3 : filterFns[globalFilterFn];\n      },\n      setColumnFilters: updater => {\n        const leafColumns = table.getAllLeafColumns();\n        const updateFn = old => {\n          var _functionalUpdate;\n          return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id);\n            if (column) {\n              const filterFn = column.getFilterFn();\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false;\n              }\n            }\n            return true;\n          });\n        };\n        table.options.onColumnFiltersChange == null ? void 0 : table.options.onColumnFiltersChange(updateFn);\n      },\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange == null ? void 0 : table.options.onGlobalFilterChange(updater);\n      },\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n      },\n      resetColumnFilters: defaultState => {\n        var _table$initialState$c, _table$initialState;\n        table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n      },\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n        }\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getFilteredRowModel();\n      },\n      _getGlobalFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__'),\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getGlobalFacetedRowModel();\n      },\n      _getGlobalFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map();\n        }\n        return table._getGlobalFacetedUniqueValues();\n      },\n      _getGlobalFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return;\n        }\n        return table._getGlobalFacetedMinMaxValues();\n      }\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  let min = 0;\n  let max = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return (min + max) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null ? void 0 : _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old != null && old.includes(column.id)) {\n            return old.filter(d => d !== column.id);\n          }\n          return [...(old != null ? old : []), column.id];\n        });\n      },\n      getCanGroup: () => {\n        var _ref, _ref2, _ref3, _column$columnDef$ena;\n        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n      },\n      getIsGrouped: () => {\n        var _table$getState$group;\n        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n      },\n      getGroupedIndex: () => {\n        var _table$getState$group2;\n        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n      },\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup();\n        return () => {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'number') {\n          return aggregationFns.sum;\n        }\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent;\n        }\n      },\n      getAggregationFn: () => {\n        var _table$options$aggreg, _table$options$aggreg2;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater),\n      resetGrouping: defaultState => {\n        var _table$initialState$g, _table$initialState;\n        table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n      },\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: row => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: (cell, column, row, table) => {\n    return {\n      getIsGrouped: () => column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () => {\n        var _row$subRows;\n        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      }\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater),\n      resetColumnOrder: defaultState => {\n        var _table$initialState$c;\n        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n      },\n      _getOrderColumnsFn: memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns = [];\n\n        // If there is no order, return the normal columns\n        if (!(columnOrder != null && columnOrder.length)) {\n          orderedColumns = columns;\n        } else {\n          const columnOrderCopy = [...columnOrder];\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns];\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift();\n            const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy];\n        }\n        return orderColumns(orderedColumns, grouping, groupedColumnMode);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn'\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      })\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst Pagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetPageIndex: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetPageIndex();\n            queued = false;\n          });\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater = old => {\n          let newState = functionalUpdate(updater, old);\n          return newState;\n        };\n        return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n      },\n      resetPagination: defaultState => {\n        var _table$initialState$p;\n        table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex);\n          const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n          return {\n            ...old,\n            pageIndex\n          };\n        });\n      },\n      resetPageIndex: defaultState => {\n        var _table$initialState$p2, _table$initialState, _table$initialState$p3;\n        table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null ? void 0 : (_table$initialState$p3 = _table$initialState.pagination) == null ? void 0 : _table$initialState$p3.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n      },\n      resetPageSize: defaultState => {\n        var _table$initialState$p4, _table$initialState2, _table$initialState2$;\n        table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p4 = (_table$initialState2 = table.initialState) == null ? void 0 : (_table$initialState2$ = _table$initialState2.pagination) == null ? void 0 : _table$initialState2$.pageSize) != null ? _table$initialState$p4 : defaultPageSize);\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n          const topRowIndex = old.pageSize * old.pageIndex;\n          const pageIndex = Math.floor(topRowIndex / pageSize);\n          return {\n            ...old,\n            pageIndex,\n            pageSize\n          };\n        });\n      },\n      setPageCount: updater => table.setPagination(old => {\n        var _table$options$pageCo;\n        let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount);\n        }\n        return {\n          ...old,\n          pageCount: newPageCount\n        };\n      }),\n      getPageOptions: memo(() => [table.getPageCount()], pageCount => {\n        let pageOptions = [];\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n        }\n        return pageOptions;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n      getCanNextPage: () => {\n        const {\n          pageIndex\n        } = table.getState().pagination;\n        const pageCount = table.getPageCount();\n        if (pageCount === -1) {\n          return true;\n        }\n        if (pageCount === 0) {\n          return false;\n        }\n        return pageIndex < pageCount - 1;\n      },\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1);\n      },\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1;\n        });\n      },\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n          table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n        }\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel();\n        }\n        return table._getPaginationRowModel();\n      },\n      getPageCount: () => {\n        var _table$options$pageCo2;\n        return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n      }\n    };\n  }\n};\n\n//\n\nconst getDefaultPinningState = () => ({\n  left: [],\n  right: []\n});\nconst Pinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      pin: position => {\n        const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n        table.setColumnPinning(old => {\n          var _old$left3, _old$right3;\n          if (position === 'right') {\n            var _old$left, _old$right;\n            return {\n              left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n              right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n            };\n          }\n          if (position === 'left') {\n            var _old$left2, _old$right2;\n            return {\n              left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n              right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n            };\n          }\n          return {\n            left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        });\n      },\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns();\n        return leafColumns.some(d => {\n          var _d$columnDef$enablePi, _table$options$enable;\n          return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_table$options$enable = table.options.enablePinning) != null ? _table$options$enable : true);\n        });\n      },\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id);\n        const {\n          left,\n          right\n        } = table.getState().columnPinning;\n        const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n        const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n        return isLeft ? 'left' : isRight ? 'right' : false;\n      },\n      getPinnedIndex: () => {\n        var _table$getState$colum, _table$getState$colum2, _table$getState$colum3;\n        const position = column.getIsPinned();\n        return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null ? void 0 : (_table$getState$colum3 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum3.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getCenterVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allCells.filter(d => !leftAndRight.includes(d.column.id));\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getLeftVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left,,], (allCells, left) => {\n        const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      }),\n      getRightVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n        const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'right'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnPinning: updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater),\n      resetColumnPinning: defaultState => {\n        var _table$initialState$c, _table$initialState;\n        return table.setColumnPinning(defaultState ? getDefaultPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultPinningState());\n      },\n      getIsSomeColumnsPinned: position => {\n        var _pinningState$positio;\n        const pinningState = table.getState().columnPinning;\n        if (!position) {\n          var _pinningState$left, _pinningState$right;\n          return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n        }\n        return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n      },\n      getLeftLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n        return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n        }\n      }),\n      getRightLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n        return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n        }\n      }),\n      getCenterLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allColumns.filter(d => !leftAndRight.includes(d.id));\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;\n        }\n      })\n    };\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n\n  createTable: table => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater),\n      resetRowSelection: defaultState => {\n        var _table$initialState$r;\n        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n      },\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n          const rowSelection = {\n            ...old\n          };\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return;\n              }\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id];\n            });\n          }\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: value => table.setRowSelection(old => {\n        const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n        });\n        return rowSelection;\n      }),\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getFilteredSelectedRowModel: memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n        }\n      }),\n      getGroupedSelectedRowModel: memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n        }\n      }),\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n        if (isAllRowsSelected) {\n          if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n            isAllRowsSelected = false;\n          }\n        }\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllPageRowsSelected = !!paginationFlatRows.length;\n        if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n          isAllPageRowsSelected = false;\n        }\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: () => {\n        var _table$getState$rowSe;\n        const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n      },\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.some(d => d.getIsSelected() || d.getIsSomeSelected());\n      },\n      getToggleAllRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected();\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n          if (isSelected === value) {\n            return old;\n          }\n          const selectedRowIds = {\n            ...old\n          };\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: () => {\n        var _table$options$enable;\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n      },\n      getCanSelectSubRows: () => {\n        var _table$options$enable2;\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n      },\n      getCanMultiSelect: () => {\n        var _table$options$enable3;\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect();\n        return e => {\n          var _target;\n          if (!canSelect) return;\n          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  var _row$subRows;\n  const row = table.getRow(id);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n  return false;\n}\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        let isString = false;\n        for (const row of firstRows) {\n          const value = row == null ? void 0 : row.getValue(column.id);\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime;\n          }\n          if (typeof value === 'string') {\n            isString = true;\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric;\n            }\n          }\n        }\n        if (isString) {\n          return sortingFns.text;\n        }\n        return sortingFns.basic;\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n        return 'desc';\n      },\n      getSortingFn: () => {\n        var _table$options$sortin, _table$options$sortin2;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder();\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n          const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n          let newSorting = [];\n\n          // What should we do with this sort action?\n          let sortAction;\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n          // Multi-mode\n          if (old != null && old.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old != null && old.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n          if (sortAction === 'add') {\n            var _table$options$maxMul;\n            newSorting = [...old, {\n              id: column.id,\n              desc: nextDesc\n            }];\n            // Take latest n columns\n            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc\n                };\n              }\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id);\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n          return newSorting;\n        });\n      },\n      getFirstSortDir: () => {\n        var _ref, _column$columnDef$sor;\n        const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: multi => {\n        var _table$options$enable, _table$options$enable2;\n        const firstSortDirection = column.getFirstSortDir();\n        const isSorted = column.getIsSorted();\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n        // If enableSortRemove, enable in general\n        multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: () => {\n        var _column$columnDef$ena, _table$options$enable3;\n        return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n      },\n      getCanMultiSort: () => {\n        var _ref2, _column$columnDef$ena2;\n        return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n      },\n      getIsSorted: () => {\n        var _table$getState$sorti;\n        const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: () => {\n        var _table$getState$sorti2, _table$getState$sorti3;\n        return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n      },\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n      },\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort();\n        return e => {\n          if (!canSort) return;\n          e.persist == null ? void 0 : e.persist();\n          column.toggleSorting == null ? void 0 : column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setSorting: updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater),\n      resetSorting: defaultState => {\n        var _table$initialState$s, _table$initialState;\n        table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n        return table._getSortedRowModel();\n      }\n    };\n  }\n};\n\n//\n\nconst Visibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value != null ? value : !column.getIsVisible()\n          }));\n        }\n      },\n      getIsVisible: () => {\n        var _table$getState$colum, _table$getState$colum2;\n        return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column.id]) != null ? _table$getState$colum : true;\n      },\n      getCanHide: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n      },\n      getToggleVisibilityHandler: () => {\n        return e => {\n          column.toggleVisibility == null ? void 0 : column.toggleVisibility(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      _getAllVisibleCells: memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n        return cells.filter(cell => cell.column.getIsVisible());\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getVisibleCells: memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, {\n        key,\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n        }\n      });\n    };\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns()),\n      getVisibleLeafColumns: makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns()),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns()),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns()),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns()),\n      setColumnVisibility: updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater),\n      resetColumnVisibility: defaultState => {\n        var _table$initialState$c;\n        table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n      },\n      toggleAllColumnsVisible: value => {\n        var _value;\n        value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n        table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n          ...obj,\n          [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n        }), {}));\n      },\n      getIsAllColumnsVisible: () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible())),\n      getIsSomeColumnsVisible: () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible()),\n      getToggleAllColumnsVisibilityHandler: () => {\n        return e => {\n          var _target;\n          table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\nconst features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$initialState;\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n  let table = {\n    _features: features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null ? void 0 : table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    getRow: id => {\n      const row = table.getRowModel().rowsById[id];\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`);\n        }\n        throw new Error();\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null ? void 0 : _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, {\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      },\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    }),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: () => {\n        var _table$options$debugA3;\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n      }\n    }),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: () => {\n        var _table$options$debugA4;\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    }),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: () => {\n        var _table$options$debugA5;\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    }),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`);\n        }\n        throw new Error();\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable == null ? void 0 : feature.createTable(table));\n  });\n  return table;\n}\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), {\n      key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n      debug: () => table.options.debugAll\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, table));\n  }, {});\n  return cell;\n}\nconst createRow = (table, id, original, rowIndex, depth, subRows) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!column.accessorFn) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!column.accessorFn) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    }),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    })\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    Object.assign(row, feature == null ? void 0 : feature.createRow == null ? void 0 : feature.createRow(row, table));\n  }\n  return row;\n};\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parent) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parent), originalRows[i], i, depth);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Table: Could not find a column to filter with columnId: ${d.id}`);\n        }\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    var _facetedRowModel$flat;\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n    let facetedMinMaxValues = [firstValue, firstValue];\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (value < facetedMinMaxValues[0]) {\n          facetedMinMaxValues[0] = value;\n        } else if (value > facetedMinMaxValues[1]) {\n          facetedMinMaxValues[1] = value;\n        }\n      }\n    }\n    return facetedMinMaxValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => table.getColumn(sort.id).getCanSort());\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = [...rows];\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = typeof aValue === 'undefined';\n            const bUndefined = typeof bValue === 'undefined';\n            if (aUndefined || bUndefined) {\n              return aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          }\n\n          // This function should always return in ascending order\n          let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0, '');\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._queue(() => {\n        table._autoResetExpanded();\n        table._autoResetPageIndex();\n      });\n    }\n  });\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };","map":{"version":3,"mappings":"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","names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","process","env","NODE_ENV","Error","column","columns","getFlatColumns","flatMap","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","_header$subHeaders","getLeftLeafHeaders","_header$subHeaders2","getRightLeafHeaders","_header$subHeaders3","center","_left$","_right$","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","_ref","childColSpan","childRowSpan","minChildRowSpan","_headerGroups$","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","_row$subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_table$getCoreRowMode","_getAllCellsByColumnId","_table$getCoreRowMode2","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","_table$initialState","_table$initialState$p3","resetPageSize","setPageSize","_table$initialState2","_table$initialState2$","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","_table$getState$colum3","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","_pinningState$positio","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","renderValue","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","warn","getRenderValue","renderFallbackValue","original","rowIndex","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","getLeafRows","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","pass","_row$subRows2","resolvedColumnFilters","resolvedGlobalFilters","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"sources":["/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/core/column.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/core/headers.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/ColumnSizing.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/Expanding.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/filterFns.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/Filters.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/aggregationFns.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/Grouping.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/Ordering.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/Pagination.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/Pinning.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/RowSelection.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/sortingFns.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/Sorting.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/features/Visibility.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/core/table.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/core/cell.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/core/row.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/columnHelper.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts","/Users/edingschool/Documents/PrescriptionMinter/FrontEnd/node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            throw new Error(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(row.getValue<string>(columnId)?.toLowerCase().includes(search))\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(row.getValue<string>(columnId)?.includes(filterValue))\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows);\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}